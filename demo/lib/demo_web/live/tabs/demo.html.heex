<h2 class="mb-6 text-2xl font-bold">Getting Started</h2>

<h2 class="text-lg font-semibold mb-3">What is LiveToast?</h2>

<p class="mt-4">
  LiveToast is a drop-in replacement for your `flash-group` component. It has two main components/features:
</p>

<ol class="mb-8 list-disc list-inside ml-4">
  <li class="mt-3">
    It provides a toast message system, that you can call
    <.link
      class="text-blue-700 hover:text-blue-500 underline"
      href="https://hexdocs.pm/live_toast/readme.html#usage"
    >
      from a function
    </.link>
    in your LiveView components.
  </li>
  <li class="mt-3">
    It also continues to render your app's flash messages, in the same style, so your users can't tell the difference (you should migrate them to the toast system, though!)
  </li>
</ol>

<h2 class="mb-6 text-2xl font-bold">Demo</h2>

<p class="mt-4">
  Here's a sneak peak of some of the customization options LiveToast provides:
</p>

<div class="mt-6 mb-12">
  <h2 class="text-lg font-semibold mb-3">Toasts</h2>
  <p class="mt-2 mb-4">
    Regular calls to <code class="text-rose-600 bg-zinc-50 rounded px-1">send_toast</code>
    will render a toast message with the default styles.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button phx-click="toast" phx-value-kind="info" phx-throttle="100">
      Info Toast
    </.button>

    <.button phx-click="toast" phx-value-kind="error" class="bg-red-100 border border-red-200/80">
      Error Toast
    </.button>
  </div>
</div>

<div class="mb-12">
  <h2 class="text-lg font-semibold mb-3">Update</h2>
  <p class="mt-2 mb-4">
    If you want to update an existing toast, you can call
    <code class="text-rose-600 bg-zinc-50 rounded px-1">send_toast</code>
    with the same UUID multiple times.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button phx-click="update_toast" phx-value-kind="info">
      Update an Existing Toast
    </.button>
  </div>
</div>

<div class="mb-12">
  <h2 class="text-lg font-semibold mb-3">Flashes</h2>
  <p class="mt-2 mb-4">
    LiveToast also continues to render your app's flash messages, in the same style as the new toasts.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button phx-click="flash" phx-value-kind="info">
      Info Flash
    </.button>

    <.button phx-click="flash" phx-value-kind="error">
      Error Flash
    </.button>
  </div>

  <p class="mt-6 mb-4">
    You can also use arbitrary severity levels. If you want to add another level like "warning", refer to <.link
      href="https://hexdocs.pm/live_toast/readme.html#custom-severity-levels"
      class="text-blue-700 hover:text-blue-500 underline"
    >the
      documentation here</.link>.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button phx-click="flash" phx-value-kind="warn">
      Warning Flash
    </.button>
  </div>
</div>

<div class="mb-12">
  <h2 class="text-lg font-semibold mb-3">Duration</h2>
  <p class="mt-2 mb-4">
    You can set the duration of different toasts. If you set duration to 0, they will stay until dismissed (like
    flashes). The default duration is 6000ms.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button phx-click={
      JS.push("toast",
        value: %{
          "kind" => "info",
          "title" => "Duration",
          "body" => "This toast will stay for 1000ms.",
          "duration" => 1000
        }
      )
    }>
      Short Toast
    </.button>

    <.button phx-click={
      JS.push("toast",
        value: %{
          "kind" => "info",
          "title" => "Duration",
          "body" => "This toast will stay for 8000ms.",
          "duration" => 8000
        }
      )
    }>
      Long Toast
    </.button>

    <.button phx-click={
      JS.push("toast",
        value: %{
          "kind" => "info",
          "title" => "Duration",
          "body" => "This toast will stay until dismissed.",
          "duration" => 0
        }
      )
    }>
      Infinite Toast
    </.button>
  </div>
</div>

<div class="mb-12">
  <h2 class="text-lg font-semibold mb-3">Position</h2>
  <p class="mt-2 mb-4">
    The default component
    <.link
      class="text-blue-700 hover:text-blue-500 underline"
      href="https://hexdocs.pm/live_toast/readme.html#setting-the-corner"
    >
      can be anchored
    </.link>
    to the top right, top left, bottom right, or bottom left of the screen.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button
      class={
        if @settings["corner"] == "top_right", do: "!border-2 !border-indigo-400/80", else: ""
      }
      phx-click={
        JS.push("toast",
          value: %{
            "kind" => "info",
            "title" => "Position changed",
            "body" => "Position set to top right."
          }
        )
        |> JS.push("change_settings", value: %{"corner" => "top_right"})
      }
    >
      Top Right
    </.button>

    <.button
      class={
        if @settings["corner"] == "top_center", do: "!border-2 !border-indigo-400/80", else: ""
      }
      phx-click={
        JS.push("toast",
          value: %{
            "kind" => "info",
            "title" => "Position changed",
            "body" => "Position set to top center."
          }
        )
        |> JS.push("change_settings", value: %{"corner" => "top_center"})
      }
    >
      Top Center
    </.button>

    <.button
      class={
        if @settings["corner"] == "top_left", do: "!border-2 !border-indigo-400/80", else: ""
      }
      phx-click={
        JS.push("toast",
          value: %{
            "kind" => "info",
            "title" => "Position changed",
            "body" => "Position set to top left."
          }
        )
        |> JS.push("change_settings", value: %{"corner" => "top_left"})
      }
    >
      Top Left
    </.button>

    <.button
      class={
        if @settings["corner"] == "bottom_right", do: "!border-2 !border-indigo-400/80", else: ""
      }
      phx-click={
        JS.push("toast",
          value: %{
            "kind" => "info",
            "title" => "Position changed",
            "body" => "Position set to bottom right."
          }
        )
        |> JS.push("change_settings", value: %{"corner" => "bottom_right"})
      }
    >
      Bottom Right
    </.button>

    <.button
      class={
        if @settings["corner"] == "bottom_center", do: "!border-2 !border-indigo-400/80", else: ""
      }
      phx-click={
        JS.push("toast",
          value: %{
            "kind" => "info",
            "title" => "Position changed",
            "body" => "Position set to bottom center."
          }
        )
        |> JS.push("change_settings", value: %{"corner" => "bottom_center"})
      }
    >
      Bottom Center
    </.button>

    <.button
      class={
        if @settings["corner"] == "bottom_left", do: "!border-2 !border-indigo-400/80", else: ""
      }
      phx-click={
        JS.push("toast",
          value: %{
            "kind" => "info",
            "title" => "Position changed",
            "body" => "Position set to bottom left."
          }
        )
        |> JS.push("change_settings", value: %{"corner" => "bottom_left"})
      }
    >
      Bottom Left
    </.button>
  </div>
</div>

<div class="mb-12">
  <h2 class="text-lg font-semibold mb-3">Titles</h2>
  <p class="mt-2 mb-4">
    You may pass an optional <code class="text-rose-600 bg-zinc-50 rounded px-1">:title</code>
    string to <code class="text-rose-600 bg-zinc-50 rounded px-1">send_toast</code>.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button phx-click={
      JS.push("toast",
        value: %{
          "kind" => "info",
          "title" => "Toast with title",
          "body" => "This is a toast with a title."
        }
      )
    }>
      With Title
    </.button>

    <.button phx-click={
      JS.push("toast", value: %{"kind" => "info", "body" => "No title on this one."})
    }>
      Without Title
    </.button>
  </div>
</div>

<div class="mb-12">
  <h2 class="text-lg font-semibold mb-3">Icons</h2>
  <p class="mt-2 mb-4">
    You may pass an optional <code class="text-rose-600 bg-zinc-50 rounded px-1">:icon</code>
    function to <code class="text-rose-600 bg-zinc-50 rounded px-1">send_toast</code>. It is expected to be a function component, which takes assigns and returns heex.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button
      class={if @settings["icon"] == "example", do: "!border-2 !border-indigo-400/80", else: ""}
      phx-click={
        JS.push("change_settings", value: %{"icon" => "example"})
        |> JS.push("toast",
          value: %{"title" => "With Icon", "body" => "This is a toast with an icon."}
        )
      }
    >
      With Icons
    </.button>

    <.button
      class={if @settings["icon"] == nil, do: "!border-2 !border-indigo-400/80", else: ""}
      phx-click={
        JS.push("change_settings", value: %{"icon" => nil})
        |> JS.push("toast",
          value: %{"title" => "No Icon", "body" => "This is a toast without an icon."}
        )
      }
    >
      Without Icons
    </.button>
  </div>
</div>

<div class="mb-12">
  <h2 class="text-lg font-semibold mb-3">Actions</h2>
  <p class="mt-2 mb-4">
    You may pass an optional <code class="text-rose-600 bg-zinc-50 rounded px-1">:action</code>
    function to <code class="text-rose-600 bg-zinc-50 rounded px-1">send_toast</code>. It is expected to be a function component, which takes assigns and returns heex.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button
      class={if @settings["action"] == "example", do: "!border-2 !border-indigo-400/80", else: ""}
      phx-click={
        JS.push("change_settings", value: %{"action" => "example"})
        |> JS.push("toast",
          value: %{"title" => "Actions", "body" => "This is a toast with an action."}
        )
      }
    >
      With Action
    </.button>

    <.button
      class={if @settings["action"] == nil, do: "!border-2 !border-indigo-400/80", else: ""}
      phx-click={
        JS.push("change_settings", value: %{"action" => nil})
        |> JS.push("toast",
          value: %{"title" => "Actions", "body" => "This is a toast without an action."}
        )
      }
    >
      Without Action
    </.button>
  </div>
</div>

<div class="mb-12">
  <h2 class="text-lg font-semibold mb-3">Kitchen Sink</h2>
  <p class="mt-2 mb-4">
    If you need total customization, you may pass a
    <code class="text-rose-600 bg-zinc-50 rounded px-1">:component</code>
    function to <code class="text-rose-600 bg-zinc-50 rounded px-1">send_toast</code>. It is expected to be a function component, which takes assigns and returns heex.
  </p>

  <p class="mt-2 mb-4">
    It will totally take over rendering for that call, so that you can render totally custom toasts. It receives all the assigns of the built in toast function. See the default implementation in GitHub for an example.
  </p>
  <div class="flex flex-wrap gap-3">
    <.button phx-click={
      JS.push("toast",
        value: %{
          "title" => "Custom component",
          "body" => "This is rendered using a custom toast.",
          "component" => "custom"
        }
      )
    }>
      Custom Component
    </.button>

    <.button phx-click={
      JS.push("toast",
        value: %{
          "title" => "Event Created",
          "body" => "Please contact your administrator for more details.",
          "component" => "everything"
        }
      )
    }>
      All The Things
    </.button>
  </div>
</div>
